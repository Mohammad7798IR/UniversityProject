// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.Data.Context;

#nullable disable

namespace Shop.Data.Migrations
{
    [DbContext(typeof(MollaShopDBContext))]
    [Migration("20220422125924_ChangeProductPriceToDecimal")]
    partial class ChangeProductPriceToDecimal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Shop.Domain.Entities.Chat.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("SendAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Shop.Domain.Entities.Contact.AppSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AboutUs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "403388dc-91e3-46a1-9a58-74ed23387843",
                            CreatedAt = "1401/2/2",
                            Description = "فروشگاه روبیک مارکت ",
                            Email = "mohammad98.master@gmail.com",
                            IsDeleted = false,
                            PhoneNumber = "09918535698"
                        });
                });

            modelBuilder.Entity("Shop.Domain.Entities.Contact.ContactUs", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ContactUs", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.Contact.QA", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QA", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ae086c96-f400-4af7-b0bd-0e416e91c4c4",
                            Answer = "روبیک مارکت یک پلتفرم فروشگاه انلاین است که ماهانه صدها کالای جذاب و پرطرفدار را با قیمت های باورنکردنی برای کاربران خود به حراج می گذارد. شما می توانید از طریق وب سایت ، لیست حراج های روزانه را مشاهده کرده و برای شرکت در آنها ثبت نام کنید",
                            CreatedAt = "1401/2/2",
                            IsDeleted = false,
                            Question = "روبیک مارکت چیست ؟"
                        },
                        new
                        {
                            Id = "f839f213-d2be-4032-8dcc-586424c288e0",
                            Answer = "روییک مارکت دارای نماد اعتماد الکترونیک از مرکز تجارت الکترونیک (وزارت صنعت ، معدن و تجارت) است و با کلیک بر روی نماد مذکور در وب سایت روبیک مارکت می توانید مشخصات دقیق آن را ملاحظه نمایید",
                            CreatedAt = "1401/2/2",
                            IsDeleted = false,
                            Question = "چگونه به روبیک مارکت اعتماد کنم؟"
                        },
                        new
                        {
                            Id = "00b8689e-5add-4607-95b6-ddc60d6c9ca8",
                            Answer = "تماس تلفنی با کارشناسان پشتیبانی روییک مارکت از طریق شماره تماس مندرج در بخش تماس با ما (در شرایط ویژه کرونایی به دلیل دورکاری تمام پرسنل، تماس تلفنی غیر فعال است)",
                            CreatedAt = "1401/2/2",
                            IsDeleted = false,
                            Question = "روش تماس با روبیک مارکت چگونه است ؟"
                        },
                        new
                        {
                            Id = "70f20b22-620f-4dfc-9da8-561cd00d6cab",
                            Answer = "هزینه ارسال کالا به صورت ثابت می باشد.  لذا توصیه می شود به منظور صرفه جویی در هزینه ارسال خود، چند کالا را همزمان با هم سفارش دهید",
                            CreatedAt = "1401/2/2",
                            IsDeleted = false,
                            Question = "هزینه ارسال کالا چگونه محاسبه می شود؟"
                        });
                });

            modelBuilder.Entity("Shop.Domain.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ea345380-5af2-4d0c-a0e2-65f3eeabb898",
                            ConcurrencyStamp = "114bde0b-091b-4cb5-ac26-d94a70eeb8f9",
                            Name = "AplicationAdmin",
                            NormalizedName = "APLICATIONADMIN"
                        },
                        new
                        {
                            Id = "19b499d6-8920-43c0-a6d7-bbe48c42f7b3",
                            ConcurrencyStamp = "fd1aeed0-2b26-4908-bd95-f47a7fcadb08",
                            Name = "AplicationUser",
                            NormalizedName = "APLICATIONUSER"
                        },
                        new
                        {
                            Id = "ac0e1032-58c2-449a-8b47-7f6838386bc0",
                            ConcurrencyStamp = "e61a52cf-6c6a-48f3-a2d2-adcc3e479430",
                            Name = "AplicationSeller",
                            NormalizedName = "APLICATIONSELLER"
                        },
                        new
                        {
                            Id = "07171c7f-a97d-45f8-a76e-2df3398a7e8e",
                            ConcurrencyStamp = "6429cf33-0a06-4cf3-a6b6-7b528defdb73",
                            Name = "AplicationSupport",
                            NormalizedName = "APLICATIONSUPPORT"
                        });
                });

            modelBuilder.Entity("Shop.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ActiveCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.MarketPlaceStore.Product.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.MarketPlaceStore.Product.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductAcceptOrRejectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductAcceptanceState")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.MarketPlaceStore.Product.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.MarketPlaceStore.Store", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AdminDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StoreAcceptanceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreAcceptanceState")
                        .HasColumnType("int");

                    b.Property<string>("StoreImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.Site.Slider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MainHeader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryHeader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Slider", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.Chat.ChatMessage", b =>
                {
                    b.HasOne("Shop.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany("ChatMessages")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Shop.Domain.Entities.Contact.ContactUs", b =>
                {
                    b.HasOne("Shop.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("ContactUs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Shop.Domain.Entities.Identity.ApplicationRole", "role")
                        .WithMany("userRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.Domain.Entities.Identity.ApplicationUser", "user")
                        .WithMany("userRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Shop.Domain.Entities.MarketPlaceStore.Product.Category", b =>
                {
                    b.HasOne("Shop.Domain.Entities.MarketPlaceStore.Product.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Shop.Domain.Entities.MarketPlaceStore.Product.Product", b =>
                {
                    b.HasOne("Shop.Domain.Entities.MarketPlaceStore.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Shop.Domain.Entities.MarketPlaceStore.Product.ProductCategory", b =>
                {
                    b.HasOne("Shop.Domain.Entities.MarketPlaceStore.Product.Category", "Category")
                        .WithMany("productCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Shop.Domain.Entities.MarketPlaceStore.Product.Product", "Product")
                        .WithMany("productCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Domain.Entities.MarketPlaceStore.Store", b =>
                {
                    b.HasOne("Shop.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Stores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Domain.Entities.Identity.ApplicationRole", b =>
                {
                    b.Navigation("userRoles");
                });

            modelBuilder.Entity("Shop.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("ContactUs");

                    b.Navigation("Stores");

                    b.Navigation("userRoles");
                });

            modelBuilder.Entity("Shop.Domain.Entities.MarketPlaceStore.Product.Category", b =>
                {
                    b.Navigation("productCategories");
                });

            modelBuilder.Entity("Shop.Domain.Entities.MarketPlaceStore.Product.Product", b =>
                {
                    b.Navigation("productCategories");
                });

            modelBuilder.Entity("Shop.Domain.Entities.MarketPlaceStore.Store", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
